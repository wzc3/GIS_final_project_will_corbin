---
title: "Civil War Battles and Railroad Junction Proximities"
subtitle: "DSAN 6750 / PPOL 6805: GIS for Spatial Data Science"
authors:
  - name: Will Corbin
    email: wzc3@georgetown.edu
    affiliation: Georgetown University
    corresponding: true
df-print: kable
title-block-banner: "#964B00"
title-block-banner-color: "black"
format:
  html:
    df-print: kable
  pdf:
    # https://quarto.org/docs/reference/formats/pdf.html
    link-citations: true
prefer-html: true
---

## Introduction

The US Civil War was one of the first wars that attempted to leverage the use of railroads. Controlling railroad locations and having easy access contributed to the Union's ability to win the war, especially because most battles took place in the US South. Railroads are able to be utilized to transport troops and supplies, and by doing so provide crucial support for an army that is not on its home soil.

The question I would like to explore:
Is the Union more likely to win battles that are located in close proximity to railroad junctions?

Null hypothesis:
The likelihood that an Union victory occurs at the given point s_i is directly proportional to the density of railroad junctions at that point.

Alternative hypothesis:
There exists a population density threshold p* such that Union victories occur at locations s_i* with railroad junction density greater than p* more often than what would be expected solely on the basis of this railroad junction density.

## Broad Roadmap

- Determine where the railroad junctions are located (specifically in the US South). 
- Determine where Civil War battles took place.
- Analyze distances from battle sites to railroad junctions.
- Compare intensity functions of railroad junctions and battle sites.
- Run an experiment that randomizes some element of battle sites location or railroad junction locations.
- Examine possible spatial effect of railroad junctions on the results of battles, specifically battles that resulted in an Union victory.
- Is there anything we can test regarding the significance of the battle?

## Exploratory Data Analysis (EDA)

```{r}
#| label: imports
library(tidyverse) |> suppressPackageStartupMessages()
library(sf) |> suppressPackageStartupMessages()
library(mapview) |> suppressPackageStartupMessages()
library(units) |> suppressPackageStartupMessages()
library(concaveman) |> suppressPackageStartupMessages()
library(dplyr) |> suppressPackageStartupMessages()
library(spatstat) |> suppressPackageStartupMessages()
cb_palette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
```

```{r}
#| label: load junction data
junction_df <- read_csv("Junction.csv", show_col_types = FALSE)

junction_df |> head()
```

```{r}
#| label: map junction data
junction_sf <- junction_df |> sf::st_as_sf(
  coords=c("X","Y"),
  crs=4326
) |> sf::st_transform(3857)
mapview(junction_sf)

```

```{r}
#| label: load battle data
battle_df <- read_csv("nps_battles.csv", show_col_types = FALSE)
battle_df <- battle_df %>% 
  mutate(
    significance_numeric = case_when(
      significance == 'A' ~ 4,
      significance == 'B' ~ 3,
      significance == 'C' ~ 2,
      significance == 'D' ~ 1
    )
  )

battle_df |> head()

```

```{r}
#| label: map battle data 
battle_sf <- battle_df |> sf::st_as_sf(
  coords=c("long","lat"),
  crs=4326
) |> sf::st_transform(3857)
mapview(battle_sf,zcol="result", label="result")

```

```{r}
#| label: map battle data with significance
battle_sf_significance <- battle_df |> sf::st_as_sf(
  coords=c("long","lat"),
  crs=4326
) |> sf::st_transform(3857)
mapview(battle_sf_significance,zcol="result", cex="significance_numeric", label="result")

```

## Hypothesis Testing

Let's generate a sample that randomly assigns the outcome of the battle.

```{r}
#| label: sample of battles with random result
battle_sf_sample <- battle_df |> sf::st_as_sf( coords=c("long","lat"), crs=4326
) |> sf::st_transform(3857)
N <- 300
battle_sf_sample <- battle_sf_sample |> sample_n(N) |> 
  mutate(label = paste0("Result: ",result))
mapview(battle_sf_sample,zcol="result", label="result")
```

Making a hull for the junctions.

```{r}
#| label: hull for junctions
hull_sf <- battle_sf |>
  concaveman::concaveman(concavity=3) |>
  sf::st_buffer(dist=5)
plot(hull_sf)
```

Making a ppp object for the junctions.

```{r}
#| label: unmarked ppp object for junction
junction_sfc <- junction_sf |> sf::st_as_sfc()
junction_ppp <- as.ppp(junction_sfc, W=as.owin(hull_sf))
```

```{r}
plot(junction_ppp)

```

```{r}
#| label: unmarked ppp object for battles
battle_sfc <- battle_sf |> sf::st_as_sfc()
battle_ppp <- as.ppp(battle_sfc, W=as.owin(hull_sf))
```

```{r}
plot(battle_ppp)

```

Intensity functions

```{r}
#| label: junction intensity
junction_int <- density(junction_ppp)
plot(junction_int)
```

```{r}
#| label: battle intensity
battle_int <- density(battle_ppp)
plot(battle_int)
```

Observed quadrant counts



```{r}
#| label: Union victories by junction density
num_regions <- 3
region_labels <- c("Low", "Medium", "High")
junction_vals <- junction_int
junction_quant <- quantile(junction_vals, probs=(0:num_regions)/   num_regions, na.rm=TRUE) 
junction_cut <- cut(junction_vals, breaks=junction_quant, labels=region_labels)
junction_areas <- tess(image=junction_cut)
plot(junction_areas)
```

```{r}
#| label: observed quadrant counts for union won battles
union_sf <- battle_sf |> filter(result == "Union") 
union_sfc <- union_sf |> sf::st_as_sfc() 
union_ppp <- as.ppp(union_sfc, Window(junction_ppp))
plot(union_ppp)
```

```{r}
#| label: low medium high
obs_union_counts <- quadratcount(union_ppp, tess=junction_areas) |> as.vector() 
names(obs_union_counts) <- region_labels
obs_union_counts

```

Monte Carlo pipeline

```{r}
#| label: simulating ppp
set.seed(1007)
gen_sim_ppp <- function() {
  union_sim <- spatstat.random::rpoint( n = nrow(union_sf),
  f = junction_int
)
  return(union_sim)
}
sim_union_ppp <- gen_sim_ppp() 
plot(sim_union_ppp)

```

```{r}
compute_quadrat_counts <- function(sim_ppp) {
  sim_counts <- quadratcount(sim_ppp, tess=junction_areas) |> as.vector() 
  names(sim_counts) <- region_labels
  return(sim_counts)
} 
compute_quadrat_counts(sim_union_ppp)
```

```{r}
#| label: monte carlo sims
set.seed(1007)
gen_sims_ppp <- function(num_sims) {
  union_sims <- spatstat.random::rpoint( n = nrow(union_sf),
  f = junction_int,
  nsim = num_sims
)
return(union_sims) }

full_sims_list <- gen_sims_ppp(num_sims = 999)
full_sim_area_counts <- lapply(X=full_sims_list, FUN=compute_quadrat_counts) 
full_count_df <- as_tibble(full_sim_area_counts) |> t() |> as_tibble()

```

```{r}
colnames(full_count_df) <- region_labels 
full_count_df |> head()
```

Test statistic

```{r}
#| label: test statistic
mc_df <- bind_rows(full_count_df, obs_union_counts)

full_count_df |> ggplot(aes(x=High)) +
  geom_density(fill=cb_palette[2], alpha=0.5) + 
  geom_vline(xintercept = obs_union_counts["High"], linetype="dashed", color=cb_palette[1])
```

```{r}
p_value_df <- mc_df[mc_df$High <= obs_union_counts["High"],] 
p_value <- nrow(p_value_df) / nrow(mc_df) 
p_value
```

### What about Confederate victories?

```{r}
#| label: observed quadrant counts for confederate won battles
confed_sf <- battle_sf |> filter(result == "Confederate") 
confed_sfc <- confed_sf |> sf::st_as_sfc() 
confed_ppp <- as.ppp(confed_sfc, Window(junction_ppp))
plot(confed_ppp)
```

```{r}

obs_confed_counts <- quadratcount(confed_ppp, tess=junction_areas) |> as.vector() 
names(obs_confed_counts) <- region_labels
obs_confed_counts

```

Monte Carlo pipeline

```{r}
set.seed(1007)
gen_sim_ppp <- function() {
  confed_sim <- spatstat.random::rpoint( n = nrow(confed_sf),
  f = junction_int
)
  return(confed_sim)
}
sim_confed_ppp <- gen_sim_ppp() 
plot(sim_confed_ppp)

```

```{r}
compute_quadrat_counts <- function(sim_ppp) {
  sim_counts <- quadratcount(sim_ppp, tess=junction_areas) |> as.vector() 
  names(sim_counts) <- region_labels
  return(sim_counts)
} 
compute_quadrat_counts(sim_confed_ppp)
```

```{r}
set.seed(1007)
gen_sims_ppp <- function(num_sims) {
  confed_sims <- spatstat.random::rpoint( n = nrow(confed_sf),
  f = junction_int,
  nsim = num_sims
)
return(confed_sims) }

full_sims_list <- gen_sims_ppp(num_sims = 999)
full_sim_area_counts <- lapply(X=full_sims_list, FUN=compute_quadrat_counts) 
full_count_df <- as_tibble(full_sim_area_counts) |> t() |> as_tibble()

```

```{r}
colnames(full_count_df) <- region_labels 
full_count_df |> head()
```

Test statistic

```{r}
mc_df <- bind_rows(full_count_df, obs_confed_counts)

full_count_df |> ggplot(aes(x=High)) +
  geom_density(fill=cb_palette[2], alpha=0.5) + 
  geom_vline(xintercept = obs_confed_counts["High"], linetype="dashed", color=cb_palette[1])
```

```{r}
p_value_df <- mc_df[mc_df$High <= obs_confed_counts["High"],] 
p_value <- nrow(p_value_df) / nrow(mc_df) 
p_value
```



## Discussion


## Conclusion

